{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain, dialog } from 'electron';\r\nimport path from 'path';\r\nimport Store from 'electron-store';\r\nimport fs from 'fs';\r\nimport fsExtra from 'fs-extra';\r\nimport { glob } from 'glob';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// ES Module __dirname equivalent\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n// Disable GPU acceleration to avoid cache issues\r\napp.disableHardwareAcceleration();\r\n// Disable GPU cache\r\napp.commandLine.appendSwitch('disable-gpu-cache');\r\n\r\n// Default configuration\r\nconst defaultConfig = {\r\n  lastFolderPath: '',\r\n  hiddenList: [\r\n    // Development folders and files\r\n    '.git', \r\n    '.vscode', \r\n    'dist-electron', \r\n    'node_modules', \r\n    'package-lock.json',\r\n    // ESLint files\r\n    '.eslintignore',\r\n    '.eslintrc',\r\n    '.eslintrc.json',\r\n    '.eslintrc.js',\r\n    // Image formats\r\n    '.jpg',\r\n    '.jpeg',\r\n    '.png',\r\n    '.gif',\r\n    '.svg',\r\n    '.ico',\r\n    '.webp',\r\n    '.bmp',\r\n    '.tiff',\r\n    '.idx'\r\n  ],\r\n  introRules: `Present a complete plan to solve the problem and implement it in the codebase.\r\n\r\nAt the end of your response, respond with the following XML section (if applicable).\r\n\r\nXML Section:\r\n\r\nDo not get lazy. Always output the full code in the XML section.\r\nEnclose this entire section in a markdown codeblock\r\nInclude all of the changed files\r\nSpecify each file operation with CREATE, UPDATE, or DELETE\r\nFor CREATE or UPDATE operations, include the full file code\r\nInclude the full file path (relative to the project directory, good: app/page.tsx, bad: /Users/mckaywrigley/Desktop/projects/new-chat-template/app/page.tsx)\r\nEnclose the code with ![CDATA[CODE HERE]]\r\nUse the following XML structure:\r\n<code_changes>\r\n  <changed_files>\r\n    <file>\r\n      <file_operation>__FILE OPERATION HERE__</file_operation>\r\n      <file_path>__FILE PATH HERE__</file_path>\r\n      <file_code><![CDATA[\r\n__FULL FILE CODE HERE__\r\n]]></file_code>\r\n    </file>\r\n    __REMAINING FILES HERE__\r\n  </changed_files>\r\n</code_changes>\r\nOther rules:\r\n\r\nDO NOT remove <ai_context> sections. These are to provide you additional context about each file.\r\nIf you create a file, add an <ai_context> comment section at the top of the file.\r\nIf you update a file make sure its <ai_context> stays up-to-date\r\nDO NOT add comments related to your edits\r\nDO NOT remove my existing comments\r\nWe may go back and forth a few times. If we do, remember to continue to output the entirety of the code in an XML section (if applicable).\r\n\r\nTake all the time you need.`,\r\n  selectedFiles: [] as string[],\r\n  userTask: '',\r\n};\r\n\r\n// Initialize store for local data\r\nconst store = new Store({\r\n  name: 'eazypaste-config',\r\n  defaults: defaultConfig,\r\n});\r\n\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\nasync function createWindow() {\r\n  mainWindow = new BrowserWindow({\r\n    width: 1200,\r\n    height: 800,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.js'),\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n    },\r\n  });\r\n\r\n  // Load your Vite dev server or the built index.html\r\n  if (import.meta.env.MODE === 'development') {\r\n    mainWindow.loadURL('http://localhost:5173');\r\n  } else {\r\n    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));\r\n  }\r\n}\r\n\r\napp.whenReady().then(async () => {\r\n  await createWindow();\r\n\r\n  app.on('activate', function () {\r\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n  });\r\n});\r\n\r\n// Graceful shutdown\r\napp.on('window-all-closed', function () {\r\n  if (process.platform !== 'darwin') app.quit();\r\n});\r\n\r\n/* IPC Handlers */\r\n\r\n// 1) Open folder dialog\r\nipcMain.handle('select-folder', async () => {\r\n  const result = await dialog.showOpenDialog({\r\n    properties: ['openDirectory'],\r\n  });\r\n\r\n  if (!result.canceled && result.filePaths && result.filePaths.length > 0) {\r\n    store.set('lastFolderPath', result.filePaths[0]);\r\n    return result.filePaths[0];\r\n  }\r\n  return null;\r\n});\r\n\r\n// 2) Get stored data\r\nipcMain.handle('get-store-data', async () => {\r\n  return {\r\n    lastFolderPath: store.get('lastFolderPath'),\r\n    hiddenList: store.get('hiddenList'),\r\n    introRules: store.get('introRules'),\r\n    selectedFiles: store.get('selectedFiles'),\r\n    userTask: store.get('userTask'),\r\n  };\r\n});\r\n\r\n// 3) Set store data\r\nipcMain.handle('set-store-data', async (_, data: any) => {\r\n  // data should be an object containing keys that exist in the store\r\n  Object.entries(data).forEach(([key, value]) => {\r\n    store.set(key, value);\r\n  });\r\n});\r\n\r\n// 4) Get folder tree structure (excluding hidden items)\r\nipcMain.handle('get-folder-tree', async (_, folderPath: string, hiddenList: string[]) => {\r\n  if (!folderPath) return [];\r\n\r\n  const getFilesRecursively = async (dir: string): Promise<any[]> => {\r\n    const items = await fsExtra.readdir(dir, { withFileTypes: true });\r\n    const result = [];\r\n\r\n    for (const item of items) {\r\n      // Skip hidden items\r\n      if (hiddenList.some(hidden => item.name.includes(hidden))) continue;\r\n\r\n      const itemPath = path.join(dir, item.name);\r\n      if (item.isDirectory()) {\r\n        // For directories, recursively get contents\r\n        const children = await getFilesRecursively(itemPath);\r\n        // Only add directory if it has visible children or is empty\r\n        result.push({\r\n          n: item.name,\r\n          p: itemPath,\r\n          d: true,\r\n          c: children // Add children directly to the directory node\r\n        });\r\n      } else {\r\n        result.push({\r\n          n: item.name,\r\n          p: itemPath,\r\n          d: false\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  try {\r\n    return await getFilesRecursively(folderPath);\r\n  } catch (error) {\r\n    console.error('Error reading folder structure:', error);\r\n    return [];\r\n  }\r\n});\r\n\r\n// 5) Get folder contents (for dynamic loading)\r\nipcMain.handle('get-folder-contents', async (_, folderPath: string, hiddenList: string[]) => {\r\n  if (!folderPath) return [];\r\n\r\n  try {\r\n    const items = await fsExtra.readdir(folderPath, { withFileTypes: true });\r\n    const contents = [];\r\n\r\n    for (const item of items) {\r\n      // Skip hidden items\r\n      if (hiddenList.some(hidden => item.name.includes(hidden))) continue;\r\n\r\n      const itemPath = path.join(folderPath, item.name);\r\n      // Ensure we only send serializable data\r\n      contents.push({\r\n        name: String(item.name),\r\n        path: String(itemPath),\r\n        isDirectory: Boolean(item.isDirectory()),\r\n        type: item.isDirectory() ? 'directory' : 'file'\r\n      });\r\n    }\r\n\r\n    // Log the data being sent\r\n    console.log('Sending folder contents:', JSON.stringify(contents));\r\n    return contents;\r\n  } catch (error) {\r\n    console.error('Error reading folder contents:', error);\r\n    return [];\r\n  }\r\n});\r\n\r\n// 6) Read file content\r\nipcMain.handle('read-file', async (_, filePath: string) => {\r\n  try {\r\n    const content = await fsExtra.readFile(filePath, 'utf-8');\r\n    return content;\r\n  } catch (error) {\r\n    console.error('Error reading file', filePath, error);\r\n    return '';\r\n  }\r\n});\r\n\r\n// Add path operations handler\r\nipcMain.handle('get-relative-path', async (_, filePath: string, rootPath: string) => {\r\n  return path.relative(rootPath, filePath);\r\n});\r\n\r\nipcMain.handle('get-basename', async (_, filePath: string) => {\r\n  return path.basename(filePath);\r\n});\r\n\r\n// Add reset handler\r\nipcMain.handle('reset-to-defaults', async () => {\r\n  try {\r\n    // Reset each value to its default\r\n    Object.entries(defaultConfig).forEach(([key, value]) => {\r\n      store.set(key, value);\r\n    });\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error resetting to defaults:', error);\r\n    return false;\r\n  }\r\n});\r\n"],"names":[],"mappings":"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"}