{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer, shell } from 'electron';\r\n\r\n// Expose protected methods that allow the renderer process to use\r\n// the ipcRenderer without exposing the entire object\r\ncontextBridge.exposeInMainWorld(\r\n  'electronAPI',\r\n  {\r\n    selectFolder: () => ipcRenderer.invoke('select-folder'),\r\n    getStoreData: () => ipcRenderer.invoke('get-store-data'),\r\n    setStoreData: (data: any) => ipcRenderer.invoke('set-store-data', data),\r\n    getFolderTree: (folderPath: string, hiddenList: string[]) =>\r\n      ipcRenderer.invoke('get-folder-tree', folderPath, hiddenList),\r\n    getFolderContents: (folderPath: string, hiddenList: string[]) =>\r\n      ipcRenderer.invoke('get-folder-contents', folderPath, hiddenList),\r\n    readFile: (filePath: string) => ipcRenderer.invoke('read-file', filePath),\r\n    getRelativePath: (filePath: string, rootPath: string) =>\r\n      ipcRenderer.invoke('get-relative-path', filePath, rootPath),\r\n    getBasename: (filePath: string) =>\r\n      ipcRenderer.invoke('get-basename', filePath),\r\n    resetToDefaults: () => ipcRenderer.invoke('reset-to-defaults'),\r\n    openExternal: (url: string) => shell.openExternal(url),\r\n  }\r\n);\r\n"],"names":["contextBridge","ipcRenderer","shell"],"mappings":";;AAIAA,SAAAA,cAAc;AAAA,EACZ;AAAA,EACA;AAAA,IACE,cAAc,MAAMC,SAAAA,YAAY,OAAO,eAAe;AAAA,IACtD,cAAc,MAAMA,SAAAA,YAAY,OAAO,gBAAgB;AAAA,IACvD,cAAc,CAAC,SAAcA,SAAAA,YAAY,OAAO,kBAAkB,IAAI;AAAA,IACtE,eAAe,CAAC,YAAoB,eAClCA,SAAAA,YAAY,OAAO,mBAAmB,YAAY,UAAU;AAAA,IAC9D,mBAAmB,CAAC,YAAoB,eACtCA,SAAAA,YAAY,OAAO,uBAAuB,YAAY,UAAU;AAAA,IAClE,UAAU,CAAC,aAAqBA,SAAAA,YAAY,OAAO,aAAa,QAAQ;AAAA,IACxE,iBAAiB,CAAC,UAAkB,aAClCA,SAAAA,YAAY,OAAO,qBAAqB,UAAU,QAAQ;AAAA,IAC5D,aAAa,CAAC,aACZA,SAAAA,YAAY,OAAO,gBAAgB,QAAQ;AAAA,IAC7C,iBAAiB,MAAMA,SAAAA,YAAY,OAAO,mBAAmB;AAAA,IAC7D,cAAc,CAAC,QAAgBC,SAAA,MAAM,aAAa,GAAG;AAAA,EAAA;AAEzD;"}